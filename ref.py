def ref():
    '''
    Справочный материал по теме

    ВИРТУАЛЬНОЕ ОКРУЖЕНИЕ (ВО)
    Нужно для изоляции текущего окружения от внешнего.

    Создание ВО. virtualenv <ve_name> f.e. virtualenv venv

    Активация ВО: source <ve_name>/bin|Scripts/activate f.e. source venv/Scripts/activate . При вводе pip freeze ничего
        не будет выведено.

    Просмотр глобально установленных пакетов: pip freeze

    ! Папка с ВО может находиться не в папке с проектом.

    Установка Flask. pip install flask

    dev server flask по умолчанию запускается на 5000-м порту

    При каждом изменении файлов в приложении нужно производить его перезапуск. Для автоматического перезапуска нужно
        запустить приложение с аргументом debug=True. Или через создание и импорт сонфигурационного файла, см. файлы
        app.py, config.py

    Чтобы вставить переменную в шаблон, в самом шаблоне нужно использовать конструкцию: {{<param_or_variable>}}

    Верстака страниц. При верстке страниц легко нарушить принцип DRY, так как различные страницы могут содержать общие
        для всех элементы верстки, например header, footer, sidebar. Для предотвращения дублирования нужно создать файл
        с макетом, который будет принимать шаблоны, необходимые для определенных ситуаций. Файл может называться
        base.html. Помимо html-тегов он содержит блоки. Блок - это основная кострукция для формирования страниц.
        Синтаксис блока следующий: {% block <block_name> %}{% endblock %}, где block_name - имя блока.
        Для передачи данных из одного шаблона в другой необходимо укзать куда данные должны быть переданы. Это
        выполняется с помощью конструкции: {% extends '<receiver_template_name>.html'%}
        Передаваемые данные заключаются в именованые блоки (блоки с такими же именами должны быть в шаблоне который был
        расширен текущим шаблоном). Т.е. если index.html расширяет base.html и передает туда данные в блоке title, то
        одноименный блок должен быть и в base.html. Конструкция: {% block title %}<transmitted_data>{% endblock %}

    Выделение функциональности в отдельный файл (наподобии плагина) называется blueprint. В терминологии django - app
    Прежде чем использовать blueprint его нужно зарегистрировать. Регистрация происходит в файле app.py

    Создание сслылок в шаблоне. В шаблоне для создания ссылки используется функция url_for(), в нее следует передать
        название функции, отображающей нужный шаблон. Например: url_for('index') - 'index' название функции из view.py
        Для генерации ссылки из blueprint.py нужно обратиться к соответствующему шаблону по имени (первый аргумент
        Blueprint), затем получить доступ к функции, отображающей нужный шаблон. url_for('posts.index')

    Взаимодействие с БД. Для взаимодействия с БД нужно установить БД и драйвер. БД - flask-sqlalchemy. Драйвер -
        mysql-connector. Драйвер обеспечивает сопряжение python и sql.
        У каждой таблицы есть id или Primary Key(pk)
    Работа с Бд в консоли.
        import models   # импорт моделей
        from app import db  # импорт базы данных из приложения
        db.create_all() # генерация таблиц на основе описанных моделей
        p = Post(title='The FirstPost', body='The first post body') # создание переменной, для записи в БД
        db.session.add(p)   # добавить данные в сессию, для записи нескольких переменных с данными нужно использовать
                            метод .add_all([<d1>, <d2>, ..., <dn>])
        db.session.commit() # сохраняет сессию в БД (фактически добавляет данные на сервер БД)

        Просмотр slug: p.slug
        Получение всех постов из БД (from models import Post или models.Post): posts = Post.query.all()
        Получение постов по ключевым словам: posts1 = Post.query.filter(Post.title.contains('First')).all() # будет
        работать как с First, так и с first или irst
        Для получения первого объекта вместо метода all() нужно использовать метод first()

    Миграции - механизм обновления базы данных при изменении моделей, добавления или удаления таблиц.
        Миграции можно делать с помощью модуля  flask-migrate и flask-script: pip install flask-migrate
        Для инициализации миграций нужно выполнить команду: py manage.py db init -- тут db - имя зарегистрированной
        команды. В результате будет создана папка migrations
        Для выполненеия миграции нужно выполнить команду: py mange.py db migrate -- в папке migrations будет создана
        папка versions, содержащая файл с хешем изменений. Данный файл содержит 2 функции: upgrade и downgrade
        Для сохранения миграции в БД нужно выполнить команду: py manage.py db upgrade

    !>>> SQLAlchemy. При ручном создании таблицы необходимо явно указать ее название. Если же модели описаны классами,
        то SQLAlchemy называет таблицы согласно именам классов.

    Подключение админ-панели. Установить расширение flask-admin. Импортировать класс Admin из flask-admin. Сделать
        административный интерфейс: admin = Admin(app) - передать приложение в конструктор класса. Связать админку с
        существующими моделями: admin.add_view(ModelView(<Model_name>, db.session)) - получает все модели из models.py и
        забирает оттуда нужную, получает объект сессии и получает все данные связанные с требуемой моделью

    Добавление тэгов в админке. Очень важно создать secret_key, без этого добавить новый тэг не получится. secret_key
        можно добавить в файле config.py. Для этого достаточно создать константу SECRET_KEY = 'something very secret'


    Зависимости:
        flask-admin

    '''
    return True
